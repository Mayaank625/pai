section .data
    num1 db 3          ; first number
    num2 db 2          ; second number
    result db 0        ; will store product
    msg db "Result: ", 0
    newline db 10,0

section .text
    global _start

_start:
    ; load numbers into registers
    mov al, [num1]
    mov bl, [num2]

    ; multiply AL * BL → result in AL
    mul bl             ; unsigned multiply AL * BL → AX
    mov [result], al   ; store only low byte (works for 0–9)

    ; convert result to ASCII
    add byte [result], '0'

    ; print "Result: "
    mov eax, 4
    mov ebx, 1
    mov ecx, msg
    mov edx, 8
    int 0x80

    ; print result
    mov eax, 4
    mov ebx, 1
    mov ecx, result
    mov edx, 1
    int 0x80

    ; print newline
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; exit
    mov eax, 1
    xor ebx, ebx
    int 0x80
multiplication
